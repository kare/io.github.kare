import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	id 'com.diffplug.spotless' version '5.12.5'
}

allprojects {
	apply plugin: 'jacoco'

	group = 'io.github.kare'
	version = '0.0.1-alpha.0'

	// https://docs.gradle.org/current/userguide/jacoco_plugin.html
	jacoco {
		toolVersion = '0.8.6'
	}
}

subprojects {
	apply plugin: 'java-library'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'maven-publish'
	apply plugin: 'signing'

	classes.dependsOn spotlessApply

	tasks.withType(Test) {
		useJUnitPlatform {
			systemProperties = [
					'junit.jupiter.extensions.autodetection.enabled': 'true',
					'junit.jupiter.execution.timeout.default': '1 m',
			]
		}
		testLogging {
			events = [
					TestLogEvent.SKIPPED,
					TestLogEvent.FAILED,
			]
			exceptionFormat TestExceptionFormat.SHORT
			info {
				events = [
						TestLogEvent.PASSED,
						TestLogEvent.SKIPPED,
						TestLogEvent.FAILED,
				]
				exceptionFormat TestExceptionFormat.FULL
			}
		}
	}
	java {
		sourceCompatibility(JavaVersion.VERSION_1_8)
		targetCompatibility(JavaVersion.VERSION_1_8)
		withJavadocJar()
		withSourcesJar()
	}
	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
		options.compilerArgs += [
				'-Werror',
				'-Xlint:auxiliaryclass',
				'-Xlint:cast',
				'-Xlint:classfile',
				'-Xlint:deprecation',
				'-Xlint:dep-ann',
				'-Xlint:divzero',
				'-Xlint:empty',
				'-Xlint:fallthrough',
				'-Xlint:finally',
				'-Xlint:options',
				'-Xlint:overloads',
				'-Xlint:overrides',
				'-Xlint:path',
				'-Xlint:processing',
				'-Xlint:rawtypes',
				'-Xlint:-serial',
				'-Xlint:static',
				'-Xlint:try',
				'-Xlint:unchecked',
				'-Xlint:varargs',
		]
	}
	tasks.withType(Javadoc){
		options.encoding = 'UTF-8'
		if (JavaVersion.current().isJava9Compatible()) {
			options.addBooleanOption('html5', true)
		}
	}
}

spotless {
	format 'misc', {
		target '**/*.gradle', '.gitignore'
		indentWithTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
	java {
		target rootProject.fileTree('.') {
			include '*/src/*/java/**/*.java'
		}
		removeUnusedImports()
		licenseHeaderFile 'LICENSE-HEADER.txt'
		googleJavaFormat('1.7')
	}
}

tasks.register('codeCoverageReport', JacocoReport) {
	dependsOn = subprojects.test
	getAdditionalSourceDirs().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
	getSourceDirectories().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
	getClassDirectories().setFrom(files(subprojects.sourceSets.main.output))
	getExecutionData().setFrom(files(subprojects.jacocoTestReport.executionData))
	reports {
		html.enabled = true
		xml.enabled = true
		csv.enabled = false
	}
}
