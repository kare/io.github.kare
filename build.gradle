import java.time.Duration

plugins {
	id "idea"
	id "eclipse"
	id "com.diffplug.spotless" version "5.14.3"
	id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

nexusPublishing {
	repositories {
		sonatype {
			nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
			snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
			username = project.findProperty("sonatypeUsername")
			password = project.findProperty("sonatypePassword")
		}
	}

	// 5 min is default
	connectTimeout.set(Duration.ofMinutes(5))
	clientTimeout.set(Duration.ofMinutes(5))
}
allprojects {
	apply plugin: "jacoco"

	group = rootProject.group
	version = rootProject.version

	// https://docs.gradle.org/current/userguide/jacoco_plugin.html
	jacoco {
		toolVersion = "0.8.7"
	}
}

subprojects {
	apply plugin: "java-library"

	classes.dependsOn spotlessApply
}

spotless {
	format "misc", {
		target "**/*.gradle", ".gitignore"
		indentWithTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
	java {
		target rootProject.fileTree(".") {
			include "*/src/*/java/**/*.java"
		}
		removeUnusedImports()
		licenseHeaderFile "LICENSE-HEADER.txt"
		googleJavaFormat("1.11.0")
	}
}

tasks.register("codeCoverageReport", JacocoReport) {
	group = "verification"
	dependsOn = subprojects.test
	getAdditionalSourceDirs().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
	getSourceDirectories().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
	getClassDirectories().setFrom(files(subprojects.sourceSets.main.output))
	getExecutionData().setFrom(files(subprojects.jacocoTestReport.executionData))
	reports {
		html.enabled = true
		xml.enabled = true
		csv.enabled = false
	}
}

tasks.register("javadoc-all", Javadoc) {
	description = "Generate Javadocs from all sub projects"
	group = "Documentation"

	def heading = "${project.name} ${project.version} API"
	title = heading
	options.windowTitle = heading
	options.links = [
			"https://docs.oracle.com/javase/8/docs/api/",
	]
	options.addStringOption("Xdoclint:none", "-quiet")
	options.charSet = "UTF-8"
	options.encoding = "UTF-8"
	options.docEncoding = "UTF-8"
	destinationDir = file("${buildDir}/docs/javadoc")
	subprojects.each { p ->
		p.tasks.withType(Javadoc).each { javadocTask ->
			source += javadocTask.source
			classpath += javadocTask.classpath
			excludes += javadocTask.excludes
			includes += javadocTask.includes
		}
	}
}
