import java.time.Duration

plugins {
	id "idea"
	id "eclipse"
	id "com.diffplug.spotless" version "5.17.1"
	id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

nexusPublishing {
	repositories {
		sonatype {
			nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
			snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
			username = project.findProperty("sonatypeUsername")
			password = project.findProperty("sonatypePassword")
		}
	}

	// 5 min is default
	connectTimeout.set(Duration.ofMinutes(5))
	clientTimeout.set(Duration.ofMinutes(5))
}
println("found sonatype username: '" + project.findProperty("sonatypeUsername") + "'")
allprojects {
	apply plugin: "jacoco"

	group = rootProject.group
	version = rootProject.version

	// https://docs.gradle.org/current/userguide/jacoco_plugin.html
	jacoco {
		toolVersion = "0.8.7"
	}
}

subprojects {
	apply plugin: "java-library"
	apply plugin: "signing"
	apply plugin: "maven-publish"

	classes.dependsOn spotlessApply

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from(project.components.java)
				pom {
					afterEvaluate {
						description = "${project.description}"
					}
					url = "https://github.com/kare/io.github.kare"
					inceptionYear = "2021"
					licenses {
						license {
							name = "Apache-2.0"
							url = "https://opensource.org/licenses/Apache-2.0"
							distribution = "repo"
						}
					}
					developers {
						developer {
							id = "kare"
							name = "Kare Nuorteva"
							email = "kare.nuorteva@me.com"
						}
					}
					scm {
						connection = "scm:git:https://github.com/kare/io.github.kare"
						developerConnection = "scm:git:ssh://github.com/kare/io.github.kare.git"
						url = "https://github.com/kare/io.github.kare"
					}
					issueManagement {
						system = "GitHub"
						url = "https://github.com/kare/io.github.kare/issues"
					}
					ciManagement {
						system = "GitHub"
						url = "https://github.com/kare/io.github.kare/actions"
					}
					organization {
						name = "Kare Nuorteva"
						url = "https://karenuorteva.fi/"
					}
				}
			}
		}
	}
	def hasSigningKey = project.hasProperty("signingKey")
	if (hasSigningKey) {
		sign(project)
	} else {
		println 'WARNING: No property \'signingKey\' found. Artifact signing will be skipped.'
	}
	signing {
		sign publishing.publications
	}
}

void sign(Project project) {
	project.signing {
		required {
			!project.hasProperty("skipSigning")
		}
		def signingKey = project.findProperty("signingKey")
		def signingPassword = project.findProperty("signingPassword")
		useInMemoryPgpKeys(signingKey, signingPassword)
		sign publishing.publications.mavenJava
	}
}

spotless {
	format "misc", {
		target "**/*.gradle", ".gitignore"
		indentWithTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
	java {
		target rootProject.fileTree(".") {
			include "*/src/*/java/**/*.java"
		}
		removeUnusedImports()
		licenseHeaderFile "gradle/LICENSE-HEADER.txt"
		googleJavaFormat("1.11.0")
	}
}

tasks.register("codeCoverageReport", JacocoReport) {
	group = "verification"
	dependsOn = subprojects.test
	getAdditionalSourceDirs().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
	getSourceDirectories().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
	getClassDirectories().setFrom(files(subprojects.sourceSets.main.output))
	getExecutionData().setFrom(files(subprojects.jacocoTestReport.executionData))
	reports {
		html.enabled = true
		xml.enabled = true
		csv.enabled = false
	}
}

tasks.register("javadoc-all", Javadoc) {
	description = "Generate Javadocs from all sub projects"
	group = "Documentation"

	def heading = "io.github.kare ${project.version} API"
	title = heading
	options.windowTitle = heading
	options.links = [
			"https://docs.oracle.com/javase/8/docs/api/",
	]
	options.addStringOption("Xdoclint:none", "-quiet")
	options.charSet = "UTF-8"
	options.encoding = "UTF-8"
	options.docEncoding = "UTF-8"
	destinationDir = file("${buildDir}/docs/javadoc")
	subprojects.each { p ->
		p.tasks.withType(Javadoc).each { javadocTask ->
			source += javadocTask.source
			classpath += javadocTask.classpath
			excludes += javadocTask.excludes
			includes += javadocTask.includes
		}
	}
}
