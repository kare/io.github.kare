plugins {
	id "java-library"
}

configurations.all {
	resolutionStrategy {
		failOnVersionConflict()
	}
}

test {
	useJUnitPlatform {
		systemProperties = [
				"junit.jupiter.extensions.autodetection.enabled": "true",
				"junit.jupiter.execution.timeout.default"       : "1 m",
				"junit.jupiter.execution.parallel.enabled"      : true,
		]
	}
	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// set a system property for the test JVM(s)
	//systemProperty 'some.prop', 'value'

	// explicitly include or exclude tests
	//include 'org/foo/**'
	//exclude 'org/boo/**'

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "512m"

	// listen to events in the test execution lifecycle
	beforeTest { desc ->
		logger.lifecycle("Running test: ${desc.className}.${desc.name}")
	}
	afterTest { desc, result ->
		logger.quiet "TEST ${desc.className}.${desc.name}: ${result.resultType}"
	}

	// Fail the 'test' task on the first test failure
	failFast = true

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		logger.lifecycle("Test: ${descriptor} produced standard out/err: ${event.message}")
	}
}

tasks.compileJava {
	javaCompiler.set(javaToolchains.compilerFor {
		languageVersion.set(JavaLanguageVersion.of(8))
	})
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
	withJavadocJar()
	withSourcesJar()
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.compilerArgs += [
			"-Werror",
			"-Xlint:auxiliaryclass",
			"-Xlint:cast",
			"-Xlint:classfile",
			"-Xlint:deprecation",
			"-Xlint:dep-ann",
			"-Xlint:divzero",
			"-Xlint:empty",
			"-Xlint:fallthrough",
			"-Xlint:finally",
			"-Xlint:options",
			"-Xlint:overloads",
			"-Xlint:overrides",
			"-Xlint:path",
			"-Xlint:processing",
			"-Xlint:rawtypes",
			"-Xlint:serial",
			"-Xlint:static",
			"-Xlint:try",
			"-Xlint:unchecked",
			"-Xlint:varargs",
	]
}

tasks.withType(Javadoc) {
	options.links += [
			"https://docs.oracle.com/javase/8/docs/api/",
	]
	options.addStringOption("Xdoclint:none", "-quiet")
	options.charSet = "UTF-8"
	options.encoding = "UTF-8"
	options.docEncoding = "UTF-8"
	options.windowTitle = "${project.name} ${project.version} API"
	options.source = "8"
}
